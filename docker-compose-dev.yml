version: '3'

services:
  product-api:
    build:
      context: .
    container_name: product-api-front
    image: gustavofranca/simple-ecommerce-product-api
    networks:
      - mysql-net
      - nginx-net
    environment:
      - DATABASE_USER=simple-eccomerce
      - DATABASE_PASSWORD=simple-eccomerce
      - DATABASE_ADDRESS=tcp(mysql-product-api:3306)
      - DATABASE_NAME=product
    depends_on:
      - mysql-product-api
    entrypoint: dockerize -timeout 250s -wait tcp://mysql-product-api:3306 /app/cmd/api/main
    restart: always

  mysql-product-api:
    container_name: mysql-product-api
    image: mysql
    networks:
      - mysql-net
    volumes:
      - ./mysql/dbdata:/var/lib/mysql
    environment:
      - MYSQL_DATABASE=product
      - MYSQL_USER=simple-eccomerce
      - MYSQL_PASSWORD=simple-eccomerce
      - MYSQL_ROOT_PASSWORD=simple-eccomerce
      - LANG=C.UTF-8
    command: [ "mysqld","--default-authentication-plugin=mysql_native_password" ]
  cart-api:
    build:
      context: .
    container_name: cart-api-front
    image: gustavofranca/simple-ecommerce-cart-api
    networks:
      - redis-net
      - nginx-net
    environment:
      - KVS_HOST=redis
      - KVS_PORT=6379
      - KVS_PASSWORD=secret
      - PORT=8080
    depends_on:
      - redis
    entrypoint: dockerize -timeout 250s -wait tcp://redis:6379 npm run
    command: compile-and-start
    restart: always
  redis:
    container_name: redis-front
    image: redis
    networks:
      - redis-net
    command: >
      --requirepass secret
  nginx:
    build:
      context: ./dependencies/nginx/
    container_name: nginx-front
    image: gustavofranca/simple-ecommerce-nginx
    ports:
      - "8080:80"
    command: ["nginx", "-g", "daemon off;"]
    entrypoint: dockerize -timeout 250s -wait http://product-api:8080 /docker-entrypoint.sh
    networks:
      - nginx-net
    restart: always
    depends_on:
      - product-api
      - cart-api
      - mysql-product-api
      - redis
networks:
  mysql-net: { }
  redis-net: { }
  nginx-net: { }

